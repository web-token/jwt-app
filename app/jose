#!/usr/bin/env php
<?php

declare(strict_types=1);

require __DIR__.'/../vendor/autoload.php';

use Http\Client\Curl\Client;
use Jose\Component\Console;
use Symfony\Component\Console\Application;
use Jose\Component\KeyManagement\Analyzer;
use Jose\Component\KeyManagement\X5UFactory;
use Jose\Component\KeyManagement\JKUFactory;
use Nyholm\Psr7\Factory\Psr17Factory;

if (PHP_VERSION_ID < 80100) {
    file_put_contents('php://stderr', sprintf(
        'This application requires PHP 8.1 version or higher and your system has'.PHP_EOL.
        'PHP %s version installed'.PHP_EOL.PHP_EOL.
        'To solve this issue, upgrade your PHP installation.'.PHP_EOL,
        PHP_VERSION
    ));

    exit(1);
}

$httpClient = new Client();
$requestFactory = new Psr17Factory();
$jwkAnalyzerManager = new Analyzer\KeyAnalyzerManager();
$jwkAnalyzerManager->add(new Analyzer\AlgorithmAnalyzer());
$jwkAnalyzerManager->add(new Analyzer\UsageAnalyzer());
$jwkAnalyzerManager->add(new Analyzer\KeyIdentifierAnalyzer());
$jwkAnalyzerManager->add(new Analyzer\NoneAnalyzer());
$jwkAnalyzerManager->add(new Analyzer\OctAnalyzer());
$jwkAnalyzerManager->add(new Analyzer\RsaAnalyzer());
$jwkAnalyzerManager->add(new Analyzer\ES256KeyAnalyzer());
$jwkAnalyzerManager->add(new Analyzer\ES384KeyAnalyzer());
$jwkAnalyzerManager->add(new Analyzer\ES512KeyAnalyzer());
$jwkAnalyzerManager->add(new Analyzer\HS256KeyAnalyzer());
$jwkAnalyzerManager->add(new Analyzer\HS384KeyAnalyzer());
$jwkAnalyzerManager->add(new Analyzer\HS512KeyAnalyzer());

$jwksetAnalyzerManager = new Analyzer\KeysetAnalyzerManager();
$jwksetAnalyzerManager->add(new Analyzer\MixedKeyTypes());
$jwksetAnalyzerManager->add(new Analyzer\MixedPublicAndPrivateKeys());

$application = new Application('Jose', '@package_version@');
$application->add(new Console\SecretKeyGeneratorCommand());
$application->add(new Console\OctKeyGeneratorCommand());
$application->add(new Console\PublicKeyCommand());
$application->add(new Console\RsaKeyGeneratorCommand());
$application->add(new Console\EcKeyGeneratorCommand());
$application->add(new Console\OkpKeyGeneratorCommand());
$application->add(new Console\KeyFileLoaderCommand());
$application->add(new Console\P12CertificateLoaderCommand());
$application->add(new Console\X509CertificateLoaderCommand());

$application->add(new Console\EcKeysetGeneratorCommand());
$application->add(new Console\OkpKeysetGeneratorCommand());
$application->add(new Console\OctKeysetGeneratorCommand());
$application->add(new Console\RsaKeysetGeneratorCommand());
$application->add(new Console\NoneKeyGeneratorCommand());
$application->add(new Console\MergeKeysetCommand());
$application->add(new Console\PublicKeysetCommand());
$application->add(new Console\RotateKeysetCommand());
$application->add(new Console\AddKeyIntoKeysetCommand());

$application->add(new Console\OptimizeRsaKeyCommand());
$application->add(new Console\KeyAnalyzerCommand($jwkAnalyzerManager));
$application->add(new Console\KeysetAnalyzerCommand($jwksetAnalyzerManager, $jwkAnalyzerManager));
$application->add(new Console\X5ULoaderCommand(new X5UFactory($httpClient, $requestFactory)));
$application->add(new Console\JKULoaderCommand(new JKUFactory($httpClient, $requestFactory)));

$application->add(new Console\PemConverterCommand());

$application->add(new Console\GetThumbprintCommand());

$application->run();
